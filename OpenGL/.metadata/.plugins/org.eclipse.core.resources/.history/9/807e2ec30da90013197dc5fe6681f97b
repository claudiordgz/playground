/*
 * opengl_methods.cpp
 *
 *  Created on: Mar 10, 2014
 *      Author: claudiordgz
 */

#include "opengl_methods.hpp"

#include "LoadShaders.h"

#include <fstream>

/*
 *  Template includes after
 *  our regular libraries
 */
#include "file_operations.hpp"

#define debugging_enabled true
#if 0
#define DEBUG__
#endif
#ifdef DEBUG__
#define DEBUG(x)  do { \
  if (debugging_enabled) { std::cerr << x << std::endl; } \
} while (0)
#else
#define DEBUG(x)
#endif


int OpenGLProgram::Init()
{
  GLint compile_ok = GL_FALSE, link_ok = GL_FALSE;
  GLuint vs = glCreateShader(GL_VERTEX_SHADER);
  SetShader(vs, "triangles.vert");
  glCompileShader(vs);
  glGetShaderiv(vs, GL_COMPILE_STATUS, &compile_ok);
  if (0 == compile_ok)
  {
    std::cerr << "Error in vertex shader\n";
    return (0);
  }
  GLuint fs = glCreateShader(GL_FRAGMENT_SHADER);
  SetShader(fs, "triangles.frag");
  glCompileShader(fs);
  glGetShaderiv(fs, GL_COMPILE_STATUS, &compile_ok);
  if (!compile_ok)
  {
    std::cerr << "Error in fragment shader\n";
    return (0);
  }
  this->program = glCreateProgram();
  glAttachShader(this->program, vs);
  glAttachShader(this->program, fs);
  glLinkProgram(this->program);
  glGetProgramiv(this->program, GL_LINK_STATUS, &link_ok);
  if (!link_ok)
  {
    std::cerr << "glLinkProgram:";
    return (0);
  }

  const char* attribute_name = "coord2d";
  this->attribute_coord2d = glGetAttribLocation(this->program, attribute_name);
  if (this->attribute_coord2d == -1)
  {
    std::cerr << "Could not bind attribute " << attribute_name << std::endl;
    return (0);
  }

  return (1);
}


void OpenGLProgram::Display(void)
{
  /* Clear the background as white */
  glClearColor(1.0, 1.0, 1.0, 1.0);
  glClear(GL_COLOR_BUFFER_BIT);

  glUseProgram(this->program);
  glEnableVertexAttribArray(this->attribute_coord2d);
  GLfloat triangle_vertices[] = {
     0.0,  0.8,
    -0.8, -0.8,
     0.8, -0.8,
  };
  /* Describe our vertices array to OpenGL (it can't guess its format automatically) */
  glVertexAttribPointer(
    this->attribute_coord2d, // attribute
    2,                 // number of elements per vertex, here (x,y)
    GL_FLOAT,          // the type of each element
    GL_FALSE,          // take our values as-is
    0,                 // no extra data between each position
    triangle_vertices  // pointer to the C array
  );

  /* Push each element in buffer_vertices to the vertex shader */
  glDrawArrays(GL_TRIANGLES, 0, 3);
  glDisableVertexAttribArray(this->attribute_coord2d);

  /* Display the result */
  glutSwapBuffers();
}

void OpenGLProgram::SetShader(GLuint &shader, const char *filename)
{
  std::string s_source;
  GetShader(dir_, filename, this->open_gl_version, s_source);
  const char * c_source = s_source.c_str();
  glShaderSource(shader, 1, &c_source, NULL);
}

void OpenGLProgram::GetShader(const char *file_name, std::string const& open_gl_ver,
                              std::string &returnVal)
{
  std::string file_str(this->dir);
  file_str.append(file_name);
  DEBUG(file_str);
  returnVal.assign(open_gl_ver.begin(), open_gl_ver.end());
  read_file(file_str.c_str(), returnVal);
  DEBUG(returnVal);
}

void OpenGLProgram::FreeResources()
{
  glDeleteProgram(this->program);
}

void OpenGLProgram::run(void)
{
  if(1 == Init())
  {
    /* We can display it if everything goes OK */
    SetupDisplayCallback();
    glutMainLoop();
  }

  /* If the program exits in the usual way,
  free resources and exit with a success */
  FreeResources();
}

OpenGLProgram* g_CurrentInstance;

extern "C"
void drawCallback()
{
  g_CurrentInstance->_Display();
}

void OpenGLProgram::SetupDisplayCallback()
{
  ::g_CurrentInstance = this;
  ::glutDisplayFunc(::drawCallback);
}
